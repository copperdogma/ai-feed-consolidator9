---
description: Overview of the entire project with tech and command references
globs: 
alwaysApply: true
---
# AI Feed Consolidator - Project Reference

**NOTE: Keep this file EXTREMELY succinct**

## Purpose
AI Feed Consolidator is a content aggregation platform that consolidates RSS feeds, summarizes content, and provides personalized recommendations using AI. Users can manage content sources, view summaries, and prioritize content based on interests.

## Project Layout
```
/packages
  /client         # React frontend
  /server         # Node.js backend
    /src
      /lib        # Core libraries (context, firebase-admin)
      /repositories # Data access layer
      /router     # API endpoints (tRPC routers)
      /sdks       # External service clients (Prisma)
      /services   # Business logic 
      /tests      # Test files
      /scripts    # Utility scripts
    /prisma       # Database schema and migrations
/docs             # Project documentation
```

## Data Model
Core entities in `packages/server/prisma/schema.prisma`:
- **User**: Account details, authentication
- **Source**: Content sources (RSS, YouTube, Twitter, Email)
- **Content**: Aggregated content items from sources
- **Summary**: AI-generated content summaries
- **Topic**: Content categorization
- **ContentTopic**: Many-to-many relationship

## Authentication Flow
- Firebase Authentication (packages/server/src/lib/firebase-admin.ts)
- tRPC context creation (packages/server/src/lib/context.ts)
- Server-side auth middleware for protected endpoints
- Client authentication through Firebase SDK
- JWT tokens for session management

## AI Integration
- OpenAI API for content summarization (GPT-4/3.5-turbo)
- Content priority detection based on user preferences
- Topic classification of incoming content
- Time-to-consume estimates for content items

## Key Environment Variables
- **Database URLs**: 
  - `DATABASE_URL`: Development database (ai-feed-consolidator-dev)
  - `TEST_DATABASE_URL`: Testing database (ai-feed-consolidator-test)
  - `PROD_DATABASE_URL`: Production database (ai-feed-consolidator-prod)
- **Firebase Auth**:
  - `FIREBASE_PROJECT_ID`: Firebase project identifier
  - `FIREBASE_CLIENT_EMAIL`: Service account email
  - `FIREBASE_PRIVATE_KEY`: Authentication key
- **AI Services**:
  - `OPENAI_API_KEY`: For AI-powered summarization
  - `OPENAI_MODEL`: Primary GPT model to use
  - `FALLBACK_MODEL`: Backup model if primary is unavailable

## API Structure
tRPC routers in packages/server/src/router/:
- auth.router.ts: Authentication endpoints
- user.router.ts: User profile management
- content.router.ts: Content aggregation and management

## Frontend Routes
Main views in packages/client/src/views/:
- Authentication: Login, signup
- Dashboard: Content timeline
- Sources: Source management
- Profile: User settings

## Technology Stack
- **Frontend**: React, TypeScript, TailwindCSS
- **Backend**: Node.js, Express, TypeScript, tRPC
- **Database**: PostgreSQL with Prisma ORM
- **Authentication**: Firebase Authentication
- **Testing**: Vitest with custom mock utilities
- **Deployment**: Docker, Docker Compose, but hot reloading is active so most changes don't require Docker rebuilds

## Testing Strategy
- Repository layer: 100% coverage with custom Prisma mocks (`mockPrisma` utility)
- Service layer: Behavioral testing focusing on outputs
- Auth/Context: Firebase mocking with custom mock classes
- Router layer: Handler function testing with request/response mocks
- Coverage thresholds: 75% for critical lib code, 10% global minimum
- Test files use `.test.ts` extension and are automatically discovered by Vitest

## Common Commands

### Development
```bash
# Start development environment (hot reload)
npm run dev

# Start server only
npm run dev:server

# Start client only
npm run dev:client
```

### Testing
```bash
# Run all tests (server and client)
npm test

# Run all server tests
npm run test:server

# Run specific server test
npm run test:server -- src/tests/path/to/test.ts

# Run client tests
npm run test:client

# Run test coverage report
npm run test:coverage
```

### Database
```bash
# Generate Prisma client after schema changes
npx prisma generate

# Create and apply migrations
npx prisma migrate dev

# Reset database (development only)
npx prisma migrate reset

# Open Prisma Studio to inspect database
npx prisma studio
```

### Docker
```bash
# Start all services
docker-compose up

# Rebuild containers
docker-compose up --build

# Stop all services
docker-compose down
```

## CI/CD
- GitHub Actions for CI/CD pipeline
- Automatic testing on pull requests
- Deployment to production on merge to main branch 